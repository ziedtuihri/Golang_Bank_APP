// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0

package db

import (
	"context"
	"database/sql"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

type Queries struct {
	db DBTX
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db: tx,
	}
}

/* This code is related to a database layer that uses the SQLC tool to generate code based on SQL queries. 
It defines a set of functions to interact with a database using a specified database driver.

The DBTX interface defines the methods that should be implemented by a database transaction object, 
including ExecContext, PrepareContext, QueryContext, and QueryRowContext.

The New function creates a new instance of the Queries struct with the provided DBTX object, 
which is used to execute SQL queries.

The Queries struct contains a reference to the DBTX object and can also be created using a transaction with the WithTx method.

Overall, this code provides a convenient way to interact with a database by abstracting away low-level details of SQL query execution, allowing developers to focus on the application's business logic.

*/